@page "/RegistroEmpaquete"
@page "/RegistroEmpaquete/{Productoid:int}"
@inject IToastService toast
<EditForm Model="productospaquete" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div className="container">

    <div class="card align-items-center">
    <div class="card">


        <div class="card-header">
            <h3>Entrada de productos Empacados</h3>
        </div>


        <div class="card-body">
            <form>

                @*Producto id*@

                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>Id</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="productospaquete.Id" class="form-control col-4" />
                                <div>
                                    <div>

                                    <button type="button" class="btn btn-primary input-group-text"
                                        @onclick="Buscar">Buscar</button>

                                </div>
                                </div>
                             </div>
                        </div>
                    </div>
                </div>


                @* Fecha *@
                <div Class="form-group">
                    <label>Fecha</label>
                    <div class="input-group">
                        <span class="input-group-text">Fecha</span>
                        <input type="date" @bind-value="productospaquete.FechaCaducacion" />
                        <ValidationMessage For="@(() =>productospaquete.FechaCaducacion)" />
                    </div>
                </div>
                 <div Class="form-group">
                    <label>Fecha</label>
                    <div class="input-group">
                        <span class="input-group-text">Concepto</span>
                       <InputText class="form-control" @bind-Value="productospaquete.Concepto" />
                      <ValidationMessage For="@(() =>productospaquete.Concepto)" /> 
                    </div>
                </div>
            
            </form>
        </div>
      
               


      






        <div class="card-header align-items-center">
            <h3>Utilizado</h3>
        </div>

        <div class="card-body">

            <div class="form-row align-items-center">
                <div class="col">
                    <div class="form-group">


                        <div class="input-group">
                            <div class="flex-fill mx-2">
                                <label>Producto</label>
                                <InputSelect class="form-control col-2" @bind-Value="productos.ProductoId">
                                    
                                        @foreach (var item in lista)
                                        {
                                            
                                            <option value="@item.ProductoId">@item.Descripcion</option>
                            
                                        }
                                </InputSelect>
                            </div>

                            <div class="flex-fill mx-2">
                                <label>Cantidad</label>
                                <InputNumber class="form-control" @bind-Value="productospaquete.Cantidad" />
                            </div>

                            <button type="button" class="btn btn-sm btn-primary" @onclick="Agregardetalle">+Add</button>
                        </div>
                    </div>
                </div>
            </div>


            <table class="table table-light">
                <thead class="thead">
                    <tr class="table">
                        <th>ProductoID</th>
                        <th>Descripci√≥n</th>
                        <th>Cantida</th>
                        
                    </tr>
                </thead>

                <tbody>
                
                    @foreach (var items in productospaquete.AyudaPaquete)
                    {
                      
                            <tr>
                             <td>@items.Id</td>
                             <td>@items.Concepto</td>
                            <td>@items.Cantidad</td>
                              <td><span class="btn btn-sm btn-outline-primary oi oi-ban" href="#"  @onclick="@(() => RemoverFila(items))"> Remover</span> </td>
                        </tr>
                            
                        
                    }
                        
                
                    
                

                </tbody>
            </table>
              
                <div class="flex-fill mx-1">
                  <label>Peso total</label>
                 <InputNumber readonly class="" @bind-Value="productospaquete.total" />
                </div>
             
           


            <div class="card-header align-items-center">
                <h3>Producido</h3>
            </div>
            <div class="form-row align-items-center">
                <div class="col">
                    <div class="form-group">


                        <div class="input-group">
                             <div class="flex-fill mx-2">
                                <label>Producto</label>
                                <InputSelect class="form-control col-2"  @bind-Value="productospaquete.Id  ">
                                       
                                        @foreach (var item in productospaquete.AyudaPaquete)
                                        {
                                            
                                            <option value="@item.Id">@item.Concepto</option>
                            
                                        }
                                        
                                </InputSelect>
                            </div>

                            <div class="flex-fill mx-2">
                                <label>Cantidad</label>
                                <InputNumber class="form-control" @bind-Value="productospaquete.Producido" />
                            </div> 

                            
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-body">

                <div class="card-footer">

                    <div class="form-group text-center" display: inline-block>

                        <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>

                        <button type="submit" class="btn btn-lg btn-success">Guardar</button>

                        <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>

                    </div>

                </div>
            </div>
        </div>
         </div>
            </div>
       </div>
</EditForm>

@code {
    [Parameter]
    public int Productoid { get; set; }
    public Productos productos { get; set; } = new Productos();
    public Productosdetalle productosdetalle { get; set; } = new Productosdetalle();
    public Productospaquete productospaquete {get; set;}= new Productospaquete();
   public Productoparaayuda productoparaayuda {get; set;}= new Productoparaayuda("",0,0);
    
    public List<Productos> lista { get; set; } = new List<Productos>();
    public List<Productosdetalle> listas { get; set; } = new List<Productosdetalle>();
    public List<Productospaquete> lista3 {get; set; }=new List<Productospaquete>();
    
     public List<Productoparaayuda> lista4 { get; set; } = new List<Productoparaayuda>();

    public string? Concepto  { get; set; }
    public int Cantidad{ get; set; }
    public string Filtro { get; set; }

    [Inject]
    public ProductosBLL productosBLL { get; set; }
   

   
   protected override void OnInitialized()

    {

       productospaquete.Id=Productoid;
        lista = productosBLL.GetList(c => true);
        lista3=productosBLL.GetListEmpaquetado(c => true);
      
        Buscar();
    }
    

    public void Buscar()
    {

        Productospaquete encontrado = productosBLL.Buscarpaquete(productospaquete.Id);
       
        if (encontrado != null)
        {


            this.productospaquete = encontrado;
            
            
            @* this.productos.Descripcion = encontrado.Descripcion;
                this.productos.Costo = encontrado.Costo;
                this.productos.Existencia = encontrado.Existencia;
                this.productos.ValorInventario = encontrado.ValorInventario;
                this.productos.Precio = encontrado.Precio;
                this.productos.Ganancia = encontrado.Ganancia; *@



        }
        else
        {

            //MessageBox.Show("No se pudo encontar el producto", "Falido", MessageBoxButton.OK, MessageBoxImage.Error);
        }
    }
    public void Nuevo()
    {
    
        Limpiar();
    }
    
    
    

   
  
    public void Guardar()
    {
          Productos encontrado = productosBLL.Buscar(productos.ProductoId);
         if (encontrado != null)
        {
         
              this.productos=encontrado;
             
                   
                          lista4 = productosBLL.GetListAyuda(p => true);
                          
                    productosBLL.Modificarpararestar(productos,productospaquete);
           
          
             @* productospaquete.Descripcion=encontrado.Descripcion;  *@
            @*  productos.Descripcion="Mixto";
            productos.Existencia=productospaquete.Cantidad;  *@
             @*  productosBLL.insertar(productos); *@
               productospaquete.NombreproductoProducido=encontrado.Descripcion;
            
            productosBLL.Insertar(productospaquete);
            toast.ShowSuccess("Se Guardo");
          
        }
        else
        {
           toast.ShowError("No se  Guardo");
        } 
         
    }

    public void Limpiar()
    {
        productos = new Productos();
        productospaquete=new Productospaquete();
    }
    public void RemoverFila(Productoparaayuda items)
    {
         this.productospaquete.AyudaPaquete.Remove(items);
          float resta = 0;
          foreach (var itm in lista)
        {
            if (items.descricion == itm.Descripcion)
            {
                resta = itm.Gramo * (float)Cantidad;
            }
        }
         productospaquete.total -= resta;
          
    }
    
    
     
    public void Agregardetalle()
    {
        Productos encontrado = productosBLL.Buscar(productos.ProductoId);
         if (encontrado != null)
        {  
            Cantidad=productospaquete.Cantidad;
            foreach (var item in lista)
            {
                if (item.Descripcion== item.Descripcion)
                {
                productospaquete.total+= (item.Gramo* Cantidad);
                }
            }
            
                productospaquete.AyudaPaquete.Add(new Productoparaayuda (productos.Descripcion=encontrado.Descripcion ,Cantidad,encontrado.ProductoId));
                lista = productosBLL.GetList(c => true);
        }
        else
        {
           toast.ShowError("No se encontr√≥ el producto");
            //MessageBox.Show("No se pudo encontar el producto", "Falido", MessageBoxButton.OK, MessageBoxImage.Error);
        }
       
    

    }

     public void Eliminar(){
        
         Productospaquete encontrado = productosBLL.Buscarpaquete(productospaquete.Id);
       
        if (encontrado != null)
        {
            Productos encontrados = productosBLL.Buscar(productospaquete.Id);
       
            if (encontrados != null)
            {


                this.productospaquete = encontrado;
                this.productos = encontrados;
                productos.Existencia+=productospaquete.Cantidad;
                if(productosBLL.EliminarEmpaquetado(productospaquete.Id))
                {
                    toast.ShowSuccess("Se elimino el producto");

                }
                else
                {
                    toast.ShowError("No se elimino el producto");
                }
            
            }


        }else{
               toast.ShowError("No se elimino el producto");
        }
           
    }

}